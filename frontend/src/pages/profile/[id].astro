---
import { isError, profile } from "../../api";
import PrivateProfileDetails from "../../components/PrivateProfileDetails.svelte";
import Layout from "../../layouts/Layout.astro";
import { jwtDecode } from "jwt-decode";

const { id } = Astro.params;
const token = Astro.cookies.get("token")?.value;

if (!id || !token) return Astro.redirect("/login", 307);

if (id === "me")
  return Astro.redirect(
    `/profile/${jwtDecode<{ team_id: string }>(token).team_id}`,
  );
const prof = await profile(id, token);
if (isError(prof)) {
  if (prof.error === "invalid_token") return Astro.redirect("/login", 307);
  else return new Response("profile not found", { status: 404 });
}
---

<Layout>
  <h1 class="heading">{prof.name}</h1>
  {prof.type === "private" && <PrivateProfileDetails client:load prof={prof} />}

  {
    prof.rank !== -1 && (
      <div class="stats">
        Rank {prof.rank} / {prof.score} points
      </div>
    )
  }
  <div class="solves">
    <h2>Solves:</h2>
    <table>
      <tr class="headers">
        <th class="chall-name">Challenge</th>
        <th>Points</th>
        <th class="solved-at">Solved At</th>
      </tr>

      {
        prof.solves.map((solve) => (
          <tr class="solve">
            <td class="chall-name">{solve.name}</td>
            <td class="points">{solve.points} pts</td>
            <span class="timestamp" data-timestamp={solve.solvedAt}>
              {new Date(solve.solvedAt + "Z").toISOString()}
            </span>
          </tr>
        ))
      }
    </table>
  </div>
</Layout>

<script>
  // timestamps are server rendered so set them on client so they show in local tz
  document.addEventListener("astro", () => {
    document.querySelectorAll(".timestamp").forEach((span) => {
      const timestamp = (span as HTMLElement).dataset.timestamp;
      if (timestamp) {
        const date = new Date(timestamp + "Z");
        span.textContent = date.toLocaleString();
      }
    });
  });
</script>

<style>
  .stats {
    border-image: url("/border-big-off-white.png") 12 / 8px round;
    border-image-outset: 2px;
    background-color: #e6e6d2;
    width: fit-content;
    font-size: 2rem;
    padding: 1rem 2rem;
    margin: 1rem auto;
    text-align: center;
  }

  .solves {
    margin-top: 1rem;

    table {
      width: 100%;
      border-spacing: 0;
      font-size: 1.5rem;

      .headers {
        th {
          border-image: url("/border-big-off-white.png") 12 / 8px round;
          border-image-outset: 2px;
          background-color: #e6e6d2;
        }
      }
    }

    h2 {
      font-size: 3rem;
      text-align: center;
    }
  }

  .solve {
    list-style: none;
    & > * {
      padding-top: 0.5rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #e6e6d2;
    }
  }

  .chall-name {
    padding-left: 2rem;
    text-align: left;
  }

  .points {
    text-align: center;
  }

  .solved-at {
    padding-right: 2rem;
    text-align: right;
  }
</style>
